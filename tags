!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/aman2003/Documents/projects/DSA_projects/DSA_Project_Sem4/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/d104ee5b/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
Dynamic	README.md	/^#Dynamic Ridesharing Insertion Operator Implementation.$/;"	h
add_location_in_route	functions.c	/^void add_location_in_route(route *r, request *rq, int flag){$/;"	f	typeref:typename:void
arr	structures.h	/^	request **arr;$/;"	m	struct:set_of_requests	typeref:typename:request **
arrival_time	functions.c	/^double arrival_time(route r, coordinate l){$/;"	f	typeref:typename:double
calculate_objective	functions.c	/^double calculate_objective(route r, double initial_time){$/;"	f	typeref:typename:double
capacity	structures.h	/^		int capacity;$/;"	m	struct:request	typeref:typename:int
capacity	structures.h	/^		int capacity;$/;"	m	struct:worker	typeref:typename:int
constrain_satisfy	functions.c	/^int constrain_satisfy(route r, worker w, double initial_time){$/;"	f	typeref:typename:int
coordinate	structures.h	/^typedef struct coordinate{$/;"	s
coordinate	structures.h	/^}coordinate;$/;"	t	typeref:struct:coordinate
corresponding_request	structures.h	/^		request *corresponding_request;$/;"	m	struct:location_node	typeref:typename:request *
current_location	structures.h	/^		coordinate current_location;$/;"	m	struct:worker	typeref:typename:coordinate
deadline_time	structures.h	/^		double release_time, deadline_time;$/;"	m	struct:request	typeref:typename:double
destination	structures.h	/^		coordinate origin, destination;$/;"	m	struct:request	typeref:typename:coordinate
display_route	functions.c	/^void display_route(route r){$/;"	f	typeref:typename:void
findCurrentLocation	functions.c	/^route findCurrentLocation(route r, worker *w, request *rq){$/;"	f	typeref:typename:route
flow_time	functions.c	/^double flow_time(route r, request rq){$/;"	f	typeref:typename:double
init_route	functions.c	/^void init_route(route *r, coordinate worker){$/;"	f	typeref:typename:void
insertion_operator	functions.c	/^route insertion_operator(route r, worker w, request *rq){$/;"	f	typeref:typename:route
isOrigin	structures.h	/^		int isOrigin;$/;"	m	struct:location_node	typeref:typename:int
location_node	structures.h	/^typedef struct location_node{$/;"	s
location_node	structures.h	/^}location_node;$/;"	t	typeref:struct:location_node
main	main.c	/^int main(){$/;"	f	typeref:typename:int
next_location_node	structures.h	/^		struct location_node *next_location_node;$/;"	m	struct:location_node	typeref:struct:location_node *
origin	structures.h	/^		coordinate origin, destination;$/;"	m	struct:request	typeref:typename:coordinate
picked_up	structures.h	/^		int picked_up;$/;"	m	struct:worker	typeref:typename:int
release_time	structures.h	/^		double release_time, deadline_time;$/;"	m	struct:request	typeref:typename:double
request	structures.h	/^typedef struct request{$/;"	s
request	structures.h	/^}request;$/;"	t	typeref:struct:request
route	structures.h	/^typedef location_node * route;$/;"	t	typeref:typename:location_node *
sequenced_location	structures.h	/^		coordinate sequenced_location;$/;"	m	struct:location_node	typeref:typename:coordinate
set_of_requests	structures.h	/^typedef struct set_of_requests{$/;"	s
set_of_requests	structures.h	/^}set_of_requests;$/;"	t	typeref:struct:set_of_requests
time_between_nodes	functions.c	/^double time_between_nodes(coordinate n1, coordinate n2){$/;"	f	typeref:typename:double
worker	structures.h	/^typedef struct worker{$/;"	s
worker	structures.h	/^}worker;$/;"	t	typeref:struct:worker
x	structures.h	/^		double x, y;$/;"	m	struct:coordinate	typeref:typename:double
y	structures.h	/^		double x, y;$/;"	m	struct:coordinate	typeref:typename:double
